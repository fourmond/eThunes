<?xml version="1.0" encoding="UTF-8"?>
<collection-definition>
  <!-- Comment -->
  <document-type name="facture">
    <display-format>Facture du %{date%date:d/MM/yyyy}: %{montant%A} (%{ref-client} -- %{facture})</display-format>
    <filename-format>SFR/Facture-%{date%date:yyyy-MM}.pdf</filename-format>
    <public-name>Facture</public-name>
    <relevant-date>prelevement</relevant-date>
    <relevant-amount>montant</relevant-amount>
    <date-tolerance>4</date-tolerance>
  </document-type>
  <ruby-class-code module-name="SFR">
    <code><![CDATA[
module SFR
  def self.parse_facture(doc)
    res = {}
    if doc['text'] =~ /Facture\s+du\s+(\d+)\/(\d+)\/(\d+)/i
      res['date'] = Time.local($3.to_i, $2.to_i, $1.to_i)
    end
    if doc['text'] =~ /de\s*Facture\s*:\s*(\S+)/i
      res['facture'] = $1
    end
    if doc['text'] =~ /client\s*:\s*(\S+)/i
      res['ref-client'] = $1
    end
    if doc['text'] =~ /MONTANT\s*TOTAL\s*\S+\s*le\s*(\d+)\/(\d+)\/(\d+)\s*(\d+)[.,](\d+)/si
      res['prelevement'] = Time.local($3.to_i, $2.to_i, $1.to_i)
      res['montant'] = $4.to_i * 100 + $5.to_i
    end
    return res
  end

  # Parses the 'final' page and gets the bills present there. We write
  # it as a separate function, as it gets rather painful to wrap
  # everything in a do block
  def self.parse_and_fetch_bills(res, fetcher, docs)
    current_docs = {}
    for d in docs
      current_docs[d['facture']] = d
    end
    bills = res.links.select do |x|
      x[:target] =~ /affichageFacturePdf/i
    end
    for b in bills
      if current_docs.key?(b[:name])
        puts "Not downloading bill #{b[:name]}, we have it"
      else
        fetcher.get(b[:absolute_target]) do |res|
          fetcher.add_document(res, "facture")
        end
      end
    end
  end

  def self.fetch(fetcher, creds, docs)
    vals = {'username' => creds['login'],
      'password' => creds['passwd'],
      'internal' => 'W', 
      'identifier' => ''
    }

	     # 'service' => 'https://www.sfr.fr/j_spring_cas_security_check',
	     # 'spring-security-redirect' => '/do/creationMail/redirect/redirect?provenance=',

    puts
    p fetcher.methods
    puts

    p fetcher.get("http://google.com")
    return false

    fetcher.get("https://moncompte-neufbox.sfr.fr/moncompte-webapp/moncompte/factures/detailFacture.action") do |res|
      if res.ok?
        # Find the login ticket
        res.contents =~ /name="loginTicket"\s*value="([^"]+)"/;
        vals['loginTicket'] = $1
        puts
        p vals
        puts

        puts "initial"
        fetcher.dump_cookies

        
        fetcher.post("https://www.sfr.fr/cas/login?service=https://espace-client.sfr.fr/moncompte-webapp/j_spring_cas_security_check",vals) do |res|
          if res.ok?
            puts "post-login ?"
            fetcher.dump_cookies
            fetcher.get('https://moncompte-neufbox.sfr.fr/moncompte-webapp/moncompte/hub/accueil.action?javascript=true') do |res|
              if res.ok?
                puts "and what ?"
                fetcher.dump_cookies
                fetcher.get('https://moncompte-neufbox.sfr.fr/moncompte-webapp/moncompte/factures/detailFacture.action') do |res|
                  if res.ok?
                    # We really look hard into all the bills SFR knows about...
                    fetcher.get('https://moncompte-neufbox.sfr.fr/moncompte-webapp/moncompte/factures/detailFactureHisto.action') do |res|
                      SFR.parse_and_fetch_bills(res, fetcher, docs)
                    end
                  end
                end
              end
            end
          else
            p [:error, res.error]
          end
        end
      end
    end
  end
end
]]>
    </code>
  </ruby-class-code>
</collection-definition>
